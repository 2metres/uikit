/*! [replace-name] v[replace-version] */

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Core module globals
//
// Content:
// - functions
//   - AU-space
//   - AU-replace
//   - AU-svguri
//   - AU-factorial
//   - AU-pow
//   - AU-color-luminance
//   - AU-color-contrast
// - mixins
//   - AU-clearfix
//   - AU-media
//   - AU-sronly
//   - AU-outline
//   - AU-focus
// - variables
//   - breakpoints
//   - line-height (leading)
//   - font stacks
//   - max width line length (measure)
//   - colours
//   - border styles and vars
//
//  Error messages all start with a movie quote. Here are some in reserve:
//  - I have always depended on the kindness of strangers;
//  - Where we’re going, we don’t need roads;
//  - You shall not pass;
//  - You’re tearing me apart, Lisa;
//  - Toto, I’ve got a feeling we’re not in Kansas anymore;
//  - Nobody puts Baby in a corner;
//  - Try not. Do - or do not. There is no try;
//  - May the Force be with you;
//  - You call that a knife? This is a knife!
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// SASS VERSIONING
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
$name: "[replace-name]";
$version: "[replace-version]";
$dependencies: (
	[replace-dependencies]
);

@include versioning-add( $name, $version, $dependencies ); //adding dependencies to global scope

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// GLOBAL FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Return a space value based on the line-height and the unit em
 *
 * @param  {number} $number - The space as a multiplier of line-height
 * @param  {number} $number - The line-height [optional]
 *
 * @return {number}         - The space in ems
 */
 @function AU-space( $number, $line-height: $AU-leading ) {
	@if type-of( $number ) != 'number' {
		@error "I’m sorry Dave, I can’t do that; the AU-space function only takes a number!";
	}

	@if type-of( $number ) == 'number' and not unitless( $number ) {
		$number: $number / ($number * 0 + 1);
	}

	$space: $number * $line-height;

	@return #{ $space }em;
}


/**
 * Replace a string with a string
 * http://codepen.io/jakob-e/pen/doMoML
 *
 * @author @eriksen_dk <https://twitter.com/eriksen_dk>
 *
 * @param  {string} $string   - The haystack string to be manipulated
 * @param  {string} $search   - The needle to be replace
 * @param  {string} $replace  - The replacement
 *
 * @return {string}           - The manipulated string with replaced values
 */
@function AU-replace( $string, $search, $replace: '' ) {
	@if type-of( $string ) != 'string' {
		@error "I have a bad feeling about this; the AU-replace first argument must be a string!";
	}

	@if type-of( $search ) != 'string' {
		@error "We’ll always have Paris; the AU-replace second argument must be a string!";
	}

	@if type-of( $replace ) != 'string' {
		@error "Hasta la vista, baby; the AU-replace third argument must be a string!";
	}

	$index: str-index( $string, $search );

	@return if( $index,
		str-slice( $string, 1, $index - 1 ) +
		$replace +
		AU-replace(
			str-slice( $string, $index + str-length( $search )
		), $search, $replace ),
		$string
	);
}


/**
 * Generate an optimized SVG data-uri for
 * https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
 * http://codepen.io/jakob-e/pen/doMoML
 *
 * @author @eriksen_dk <https://twitter.com/eriksen_dk>
 *
 * @param  {string} $svg - The SVG to be converted
 *
 * @return {string}      - An optimized data-uri
 */
@function AU-svguri( $svg ) {
	@if type-of( $svg ) != 'string' {
		@error "With great power comes great responsibility; the AU-svguri function only takes a string!";
	}

	@if not str-index( $svg, xmlns ) { //Add missing namespace
		$svg: AU-replace( $svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"' );
	}

	$encoded:'';
	$slice: 2000;
	$index: 0;
	$loops: ceil( str-length( $svg ) / $slice ); //Chunk up string in order to avoid "stack level too deep" error

	@for $i from 1 through $loops {
		$chunk: str-slice( $svg, $index, $index + $slice - 1 );

		$chunk: AU-replace( $chunk,'"', "'" );
		$chunk: AU-replace( $chunk,'	', " " );
		$chunk: AU-replace( $chunk,"
", " " );
		$chunk: AU-replace( $chunk,"\a", " " );
		$chunk: AU-replace( $chunk,'  ', " " );
		$chunk: AU-replace( $chunk,'%', '%25' );
		$chunk: AU-replace( $chunk,'&', '%26' );
		$chunk: AU-replace( $chunk,'#', '%23' );
		$chunk: AU-replace( $chunk,'{', '%7B' );
		$chunk: AU-replace( $chunk,'}', '%7D' );
		$chunk: AU-replace( $chunk,'<', '%3C' );
		$chunk: AU-replace( $chunk,'>', '%3E' );

		/*    The maybe list

			 Keep size and compile time down
			 ... only add on documented fail

		 $chunk: AU-replace( $chunk, '|', '%7C' );
		 $chunk: AU-replace( $chunk, '[', '%5B' );
		 $chunk: AU-replace( $chunk, ']', '%5D' );
		 $chunk: AU-replace( $chunk, '^', '%5E' );
		 $chunk: AU-replace( $chunk, '`', '%60' );
		 $chunk: AU-replace( $chunk, ';', '%3B' );
		 $chunk: AU-replace( $chunk, '?', '%3F' );
		 $chunk: AU-replace( $chunk, ':', '%3A' );
		 $chunk: AU-replace( $chunk, '@', '%40' );
		 $chunk: AU-replace( $chunk, '=', '%3D' );
		*/

		$encoded: #{ $encoded }#{ $chunk };
		$index: $index + $slice;
	}

	@return url("data:image/svg+xml,#{ $encoded }");
}


/**
 * Returns the factorial of a non-negative integer.
 * https://github.com/terkel/mathsass
 *
 * @author Pascal Duez @pascalduez <http://pascalduez.me/>
 *
 * @param  {integer} $number - A non-negative integer.
 *
 * @return {integer}         - The factorial log
 */
@function AU-factorial( $number ) {
	@if $number < 0 or $number != floor( $number ) {
		@error "You talking to me?; the AU-factorial function only takes positive numbers.";
	}

	$factorial: 1;

	@while $number > 0 {
		$factorial: $factorial * $number;
		$number: $number - 1;
	}

	@return $factorial;
}


/**
 * Returns base to the exponent power.
 * https://github.com/terkel/mathsass
 *
 * @author Pascal Duez @pascalduez <http://pascalduez.me/>
 *
 * @param  {integers} $base     - The base number
 * @param  {integers} $exponent - The exponent to which to raise base
 *
 * @return {integers}           - The result of the math
 */
@function AU-pow( $base, $exponent ) {
	@if $exponent < 0 {
		@error "I can see dead people; the AU-pow function only takes positive numbers as the second argument.";
	}

	// Constants
	$LN2:   0.6931471805599453;
	$SQRT2: 1.4142135623730951;

	//full number
	@if $exponent == floor( $exponent ) {
		$rest: 1;

		@if $exponent < 0 {
			$exponent: $exponent * -1;
		}

		@while $exponent > 0 {
			@if $exponent % 2 == 1 {
				$rest: $rest * $base;
			}

			$exponent: floor($exponent * 0.5);
			$base: $base * $base;
		}

		@return if( $exponent < 0, 1 / $rest, $rest );
	}

	//decimal number
	@else {
		@if $base <= 0 {
			@return 0 / 0;
		}

		$normalized: ( $base / $SQRT2 );
		$log: 0;

		@if $normalized < 0 {
			$normalized: $normalized * -1;
		}

		@if $normalized < 0.5 {
			@while $normalized < 0.5 {
				$normalized: $normalized * 2;
				$log: $log - 1;
			}
		}

		@else if $normalized >= 1 {
			@while $normalized >= 1 {
				$normalized: $normalized / 2;
				$log: $log + 1;
			}
		}

		$divider: 1;
		$deviderExponent: $log;

		$baseExponent: if( $deviderExponent >= 0, 2, 1 / 2 );

		@if $deviderExponent < 0 {
			$deviderExponent: $deviderExponent * -1;
		}

		@while $deviderExponent > 0 {
			@if $deviderExponent % 2 == 1 {
				$divider: $divider * $baseExponent;
			}
			$baseExponent: $baseExponent * $baseExponent;
			$deviderExponent: floor( $deviderExponent * 0.5 );
		}

		$base: $base / $divider;
		$base: ( $base - 1 ) / ( $base + 1 );
		$base2: $base * $base;
		$iterator: 1;
		$tempBase: $base;
		$tempBase2: null;

		@while $tempBase2 != $tempBase {
			$base: $base * $base2;
			$iterator: $iterator + 2;
			$tempBase2: $tempBase;
			$tempBase: $tempBase + $base / $iterator;
		}

		$logarithm: ( $LN2 * $log + 2 * $tempBase ) * $exponent;
		$return: 0;

		@for $quarter from 0 to 24 {
			$return: $return + AU-pow( $logarithm, $quarter ) / AU-factorial( $quarter );
		}

		@return $return;
	}
}


/**
 * Calculate color luminance
 *
 * https://github.com/voxpelli/sass-color-helpers/blob/master/stylesheets/color-helpers/_contrast.scss
 * Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
 * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
 *
 * @author Pelle Wessman @voxpelli <http://kodfabrik.se/>
 *
 * @param  {string} $colour - The color to calculate the luminance from
 *
 * @return {float}          - The luminance
 */
@function AU-color-luminance( $colour ) {
	@if type-of( $colour ) != 'color' {
		@error "Go ahead, make my day; the AU-color-luminance function only takes a color!";
	}

	$rgba: red( $colour ), green( $colour ), blue( $colour );
	$rgba2: ();

	@for $i from 1 through 3 {
		$rgb: nth( $rgba, $i );
		$rgb: $rgb / 255;

		$rgb: if( $rgb < .03928, $rgb / 12.92, AU-pow( ( $rgb + .055 ) / 1.055, 2.4 ) );

		$rgba2: append( $rgba2, $rgb );
	}

	@return .2126 * nth( $rgba2, 1 ) + .7152 * nth( $rgba2, 2 ) + 0.0722 * nth( $rgba2, 3 );
}


/**
 * Get the contrast ratio of two colors and warn when it is below WCAG 2.0 AA standard 4.5:1
 *
 * https://github.com/voxpelli/sass-color-helpers/blob/master/stylesheets/color-helpers/_contrast.scss
 * Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
 * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
 *
 * @author Pelle Wessman @voxpelli <http://kodfabrik.se/>
 *
 * @param  {string}   $forground  - Color one
 * @param  {string}   $background - Color two
 * @param  {boolean}  $silent     - If the logs get printed in the terminal
 * @param  {boolean}  $rounded    - If the value is rounded or not
 *
 * @return {integer}             - The contrast ratio
 */
@function AU-color-contrast( $forground, $background, $silent: false, $rounded: true ) {
	@if type-of( $forground ) != 'color' {
		@error "Elementary, my dear Watson; the AU-color-contrast function only takes a color as first argument!";
	}

	@if type-of( $background ) != 'color' {
		@error "You can’t handle the truth; the AU-color-contrast function only takes a color as second argument!";
	}

	$luminance1: AU-color-luminance( $forground ) + .05;
	$luminance2: AU-color-luminance( $background ) + .05;
	$ratio: $luminance1 / $luminance2;

	@if $luminance2 > $luminance1 {
		$ratio: 1 / $ratio;
	}

	@if $ratio < 4.5 and $silent == false {
		@warn "Houston, we have a problem; contrast ratio of #{ $forground } on #{ $background } is bad, just #{ $ratio }";
	}

	@if $rounded == true {
		$ratio: round( $ratio * 10 ) / 10;
	}

	@return $ratio;
}



/**
 * The function to find the nearest accessible color
 *
 * https://github.com/alex-page/sass-a11ycolor
 *
 * @author Alex Page @aalexpaage <http://alexpage.com.au>
 *
 * @param  {Color}           $toMakeA11y            - The color that is to be changed
 * @param  {Color}           $background            - The background color to for the contrast
 * @param  {'small'|'large'} $ratioKey   ['small']  - The keyword 'small' or 'large' to set the WCAG 2.1 contrast ration or 3.0 or 4.5
 * @param  {Number}          $steps      [0.1]      - The step size our function is searching for a new color in. The bigger the number the faster the process
 *                                                    the rougher the found color.
 *
 * @return {Color}                                  - Returns the nearest accessible color
 */
@function AU-color-a11y( $toMakeA11y, $background, $ratioKey: 'small', $steps: 0.1 ) {
	@if type-of( $toMakeA11y ) != 'color' {
		@error "Where we’re going, we don’t need roads; the AU-color-a11y function only takes a color as the first attribute!";
	}

	@if type-of( $background ) != 'color' {
		@error "You shall not pass; the AU-color-a11y function only takes a color as the second attribute!";
	}

	@if $ratioKey != 'small' and $ratioKey != 'large' {
		@error "I have always depended on the kindness of strangers; the AU-color-a11y function only takes 'small' or 'large' as third attribute.";
	}

	@if type-of( $steps ) != 'number' {
		@error "You’re tearing me apart, Lisa; the AU-color-a11y function only takes a number as the forth attribute!";
	}

	@if $steps >= 100 or $steps < 0.1 {
		@error "Toto, I’ve got a feeling we’re not in Kansas anymore; the AU-color-a11y function only takes a number between 0.1 and 100 as the forth attribute!";
	}

	$ratios: (
		'large': 3,
		'small': 4.5,
	);
	$ratio: map-get( $ratios, $ratioKey );

	$currentRatio: AU-color-contrast( $toMakeA11y, $background, true, false ); // Get the current ratio
	$colorLighter: $toMakeA11y;   // We have to scope those variables outside the loop
	$ratioLighter: $currentRatio; // so that we have access to them after the loop finished
	$colorDarker: $toMakeA11y;    // doing it for all of them
	$ratioDarker: $currentRatio;  // just ever so slightly boring :)

	$hue: hue( $toMakeA11y );               // Split the color into HSL
	$saturation: saturation( $toMakeA11y ); // so we can make changes
	$lightness:  lightness( $toMakeA11y );  // the only the lightness of the color


	$i: 1;
	@while $ratioLighter < $ratio and $ratioDarker < $ratio and $i < 101 {
		$colorLighter: hsl( $hue, $saturation, ( $lightness + $i ) );   // then we lighten a new color
		$colorDarker:  hsl( $hue, $saturation, ( $lightness - $i ) );   // and darken another

		$ratioLighter: AU-color-contrast( $colorLighter, $background, true, false ); // now we assign the new ratios; the loop will break
		$ratioDarker:  AU-color-contrast( $colorDarker, $background, true, false );  // when one of these is beyond the defined ration

		$i: $i + $steps; // iterate by increasing our step
	}


	@if $ratioLighter >= $ratio {
		@return $colorLighter;
	}
	@else if $ratioDarker >= $ratio {
		@return $colorDarker;
	}
	@else {
		@error 'Bagger; AU-color-a11y was unable to find an accessible color for you.';
	}
}


//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// GLOBAL MIXINS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Clearing floats
 */
 @mixin AU-clearfix() {
	&:before,
	&:after {
		content: " "; // 1
		display: table; // 2
	}
	&:after {
		clear: both;
	}
}


/**
 * Create media queries and wraps the @content code inside of it
 *
 * @param  {keywords} $breakpoint - Either one of the following keywords: xs, sm, md, lg
 *
 * @return {string}               - The code passed in via @content wrapped inside a media query
 */
@mixin AU-media( $breakpoint ) {
	@if type-of( $breakpoint ) != 'string' {
		@error "Captain I’m giving it all she’s got but; the AU-media mixin only takes a string!";
	}

	@if $breakpoint != 'xs' and $breakpoint != 'sm' and $breakpoint != 'md' and $breakpoint != 'lg' {
		@error "There’s no crying in baseball; the AU-media mixin only takes the following breakpoint strings: xs, sm, md, lg";
	}

	@if( $breakpoint == "xs" ) {
		@media (min-width: $AU-media-xs) {
			@content;
		}
	}

	@if( $breakpoint == "sm" ) {
		@media (min-width: $AU-media-sm) {
			@content;
		}
	}

	@if( $breakpoint == "md" ) {
		@media (min-width: $AU-media-md) {
			@content;
		}
	}

	@if( $breakpoint == "lg" ) {
		@media (min-width: $AU-media-lg) {
			@content;
		}
	}
}


/**
 * Hide an element from the screen but not a screen reader
 */
@mixin AU-sronly() {
	position: absolute;
	width: 1px;
	height: 1px;
	padding: 0;
	margin: -1px;
	overflow: hidden;
	clip: rect(0,0,0,0);
	border: 0;
}


/**
 * Create outline based on the theme the user is using.
 *
 * @param  {keywords} $theme - `dark` or default ( `light` )
 *
 * @return {string}          - The code
 */
@mixin AU-outline( $theme: 'light' ) {
	@if $theme == 'dark' {
		outline: 3px solid $AU-colordark-Focus;
	}
	@else {
		outline: 3px solid $AU-color-Focus;
	}
}


/**
 * Add the outline to focus
 */
@mixin AU-focus( $theme: 'light' ) {
	&:focus {
		@include AU-outline( $theme );
	}
}


/**
 * Mixin for setting font-size and line-height.
 * @param  {keywords} $fontsize-key 		-  Either one of the following keywords: xs, sm, md, lg, xl, xxl, xxxl
 * @param  {keywords} $lineheight-key 	-  Either one of the following keywords: heading, nospace, default
 *
 * @return {string}                    	- The code; fontsize in REM, with PX fallback, and unitless line-height which matches vertical grid
*/
@mixin AU-fontsize( $fontsize-key, $lineheight-key: 'default' ) {

	// Predetermined pixel sizes mapped to keyword
	// Sizes derived from a 1.25 typescale rounded to the nearest $AU-unit (vertical grid)
	$fontsize-map: (
		xs:   14,
		sm:   16,
		md: 	20,
		lg: 	24,
		xl: 	32,
		xxl:	40,
		xxxl:	48
	);

	// Predetermined lineheight mapped to keyword
	$lineheight-map: (
		nospace:  1,
		heading:  1.25,
		default:  1.5
	);

	// Get the value from supplied key for pixel and calculate the rem value
	$fontsize-px: map-get( $fontsize-map, $fontsize-key );
	$fontsize-rem: $fontsize-px / $AU-rem;

	// Calc a unitless line-height which will fit vertical grid
	$lineheight-pixel: round( ( map-get( $lineheight-map, $lineheight-key ) * $fontsize-px ) / $AU-unit ) * $AU-unit;
	$lineheight: $lineheight-pixel / $fontsize-px;

	// Mixin output
	font-size: $fontsize-px + 0px; // pixel fallback for non-rem support
	font-size: $fontsize-rem + 0rem; // rem size
	line-height: $lineheight;
}


//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// GLOBAL VARIABLES
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/**
 * Breakpoints
 */
$AU-media-xs: 576px !default; //media query breakpoints
$AU-media-sm: 768px !default;
$AU-media-md: 992px !default;
$AU-media-lg: 1200px !default;


/**
 * Line-height (‘leading’)
 */
$AU-leading: 1.6 !default;


/**
 * Value used for REM calculation
 */
$AU-rem: 16;


/**
 * Unit used for all type and grid calculations
 */
$AU-unit: 4;


/**
 * Font stacks
 */
$AU-font: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif !default;
$AU-font-monospace: 'Lucida Sans Typewriter', 'Lucida Console', Monaco, 'Bitstream Vera Sans Mono', monospace !default;


/**
 * max-width for line lengths (the ‘measure’)
 */
$AU-maxwidth: 42em !default; //Answer to life, the universe, and everything (keeps things readable on wide viewports).


/**
 * Colors light theme
 */
$AU-color-Text:                    #313131 !default;
$AU-color-Action:                  #00698f !default;
$AU-color-Focus:                   #ea4200 !default;
$AU-color-Background-light:        #ffffff !default;

// Non-user definable pallet colors
$AU-color-Background:              #f5f5f5 !global;
$AU-color-Background-dark:         #ebebeb !global;
$AU-color-Background-darkest:      #e0e0e0 !global;
$AU-color-Muted:                   #646464 !global;
$AU-color-Border:                  #808080 !global;
// $AU-color-Background:              AU-color-a11y( darken( $AU-color-Background-light, 4%), $AU-color-Text ) !global;
// $AU-color-Background-dark:         AU-color-a11y( darken( $AU-color-Background, 4%), $AU-color-Text ) !global;
// $AU-color-Background-darkest:      AU-color-a11y( darken( $AU-color-Background-dark, 4%), $AU-color-Text ) !global;
// $AU-color-Muted:                   AU-color-a11y( mix( $AU-color-Text, $AU-color-Background-darkest, 30%), $AU-color-Background-darkest ) !global;
// $AU-color-Border:                  AU-color-a11y( desaturate( $AU-color-Background-darkest, 50%) , $AU-color-Background-darkest, 'large') !global;

/**
* Colors dark theme
*/
$AU-colordark-Text:                #ffffff !default;
$AU-colordark-Background-light:    #135E70 !default;
$AU-colordark-Action:              #61daff !default;
$AU-colordark-Focus:               #ff8629 !default;

// non user definable pallet colors
$AU-colordark-Background:          #104f5f !global;
$AU-colordark-Background-dark:     #0d414d !global;
$AU-colordark-Background-darkest:  #0a323c !global;
$AU-colordark-Muted:               #b7cfd5 !global;
$AU-colordark-Border:              #8babb3 !global;
// $AU-colordark-Background:          AU-color-a11y( darken( $AU-colordark-Background-light, 4%), $AU-colordark-Text ) !global;
// $AU-colordark-Background-dark:     AU-color-a11y( darken( $AU-colordark-Background, 4%), $AU-colordark-Text ) !global;
// $AU-colordark-Background-darkest:  AU-color-a11y( darken( $AU-colordark-Background-dark, 4%), $AU-colordark-Text ) !global;
// $AU-colordark-Muted:               AU-color-a11y( mix( $AU-colordark-Text, $AU-colordark-Background-light, 30%), $AU-colordark-Background-light ) !global;
// $AU-colordark-Border:              AU-color-a11y( desaturate( $AU-colordark-Background-light, 50%) , $AU-colordark-Background-light, 'large') !global;



/**
 * Colors system messages
 */
$AU-color-Error:                   #ff635c !default;
$AU-color-Success:                 #0cac78 !default;
$AU-color-Warning:                 #f69900 !default;
$AU-color-Info:                    #00bfe9 !default;


/**
 * Border vars and styles
 */
$AU-border-radius: 4px !default;
